---
const { title, description, url, image, tags, date } = Astro.props;

let formattedDate = "";

if (date) {
  // Convert to string if `date` is a Date object; otherwise assume it's already in a compatible format
  const dateStr =
    typeof date === "string" ? date : date.toISOString().split("T")[0];

  // Extract year, month, and day using slice
  const year = dateStr.slice(0, 4);
  const month = dateStr.slice(5, 7);
  const day = dateStr.slice(8, 10);

  // Convert month from "10" to "October"
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  const monthName = monthNames[parseInt(month, 10) - 1];

  // Format the date as "October 7, 2024"
  formattedDate = `${monthName} ${parseInt(day, 10)}, ${year}`;
}
---

<li>
  <a href={url} class="element">
    <h3>{title}</h3>

    {image && image.url && (
        <img src={image.url} alt="" height="167" width="200" />
    )}

    <p class="description">{description}</p>
    
    {date && (
    <p class="date">{formattedDate}</p>
    )}

    <ul class="tags">
      {tags.map((tag) => <li class="tag">{tag}</li>)}
    </ul>

    <p class="view">View</p>
  </a>
</li>

<style>
  li {
    --white: rgb(255, 255, 255);
    background-color: var(--white);
    list-style: "";
    width: 100%;
    max-width: 25rem;
    margin: 1rem 0;
    border-radius: 0.25rem;
    box-shadow: 0 4px 10px rgba(26, 27, 28, 0.2);
  }

  a.element {
    display: grid;
    justify-content: center;
    align-items: center;
    grid-template-areas:
      "title title"
      "image image"
      "description description"
      "tags view";
    height: 100%;
    width: 100%;
    padding: 0.5rem 1rem;
    text-decoration: none;
  }

  a.element:hover {
    color: currentColor;
  }

  a.element:hover h3 {
    color: var(--primary);
  }

  h3 {
    transition: all 0.25s ease-in-out;
    width: fit-content;
    text-transform: uppercase;
    grid-area: title;
    justify-self: center;
  }

  picture,
  img {
    grid-area: image;
    justify-self: center;
  }

  .description {
    grid-area: description;
  }

  .view {
    color: var(--primary);
    grid-area: view;
    text-transform: uppercase;
  }

  .view:hover {
    text-decoration: underline;
  }

  .tags {
    display: flex;
    flex-direction: row;
    gap: 0.2rem;
    grid-area: tags;
  }

  .tag {
    box-shadow: none;
    width: fit-content;
    padding: 0.2rem;
  }

  .tag:nth-of-type(2n + 1) {
    background-color: var(--accent-one);
  }

  .tag:nth-of-type(2n + 2) {
    background-color: var(--accent-two);
  }

  @media (prefers-reduced-motion: no-preference) {
    li {
      animation: linear animate-in-and-out;
      animation-timeline: view();
    }
  }
</style>
