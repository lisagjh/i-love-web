---
const { title, description, url, image, tags, date } = Astro.props;

let formattedDate = "";

if (date) {
  // Convert to string if `date` is a Date object; otherwise assume it's already in a compatible format
  const dateStr =
    typeof date === "string" ? date : date.toISOString().split("T")[0];

  // Extract year, month, and day using slice
  const year = dateStr.slice(0, 4);
  const month = dateStr.slice(5, 7);
  const day = dateStr.slice(8, 10);

  // Convert month from "10" to "October"
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  const monthName = monthNames[parseInt(month, 10) - 1];

  // Format the date as "October 7, 2024"
  formattedDate = `${monthName} ${parseInt(day, 10)}, ${year}`;
}
---

<li>
  <a href={url} class="element">
    <h3>{title}</h3>

    {image && image.url && (
        <img src={image.url} alt="" height="167" width="200" />
    )}

    <p class="description">{description}</p>
    
    {date && (
    <p class="date">{formattedDate}</p>
    )}

      {tags.map((tag) => <span class="tag">{tag}</span>)}

    <p class="view">View</p>
  </a>
</li>

<style>
  li {
    list-style: "";
    margin: 0.75rem 0.25rem;
    padding: 0.5rem;
    border: 1px solid var(--primary);
    border-radius: 16px;
  }

  a {
    text-decoration: none;
    color: var(--text);
  }

  h3, .view {
    color: var(--primary);
  }

  h3 {
    margin-bottom: 0.5rem;
  }

  .description {
    max-width: 40ch;
  }

  .tag {
    display: inline-block;
    margin-right: .25rem;
    padding: .1rem .2rem;
    border: 1px solid var(--color-one);
    border-radius: 10rem;
  }
</style>