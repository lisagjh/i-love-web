---
const { currentPage, parentPage, hideBreadcrumbs } = Astro.props;

// Debugging line to check if props are being passed correctly
console.log("Breadcrumb props:", { currentPage, parentPage, hideBreadcrumbs });

// If hideBreadcrumbs is true, return null to not render the breadcrumb
if (hideBreadcrumbs) {
  return null;
}

const path = Astro.url.pathname.replace(/\/$/, ""); // Normalize path
const segments = path.split("/").filter(Boolean); // Split path into segments
const titles = { journal: "Learning Journal", weloveweb: "We Love Web" }; // Define segment titles
const current = Astro.url.pathname;

---

<nav aria-label="Breadcrumb" class={current === "/" ? "nav hidden" : "nav"}>
  <ol class="breadcrumbs">
    <li><a href="/">Home</a></li>
    {parentPage && (
      <li>
        <a href={parentPage.url} aria-label={`Go to ${parentPage.title}`} title={`Go to ${parentPage.title}`}>
          {parentPage.title}
        </a>
      </li>
    )}
    {segments.map((segment, index) => {
      const displayName = titles[segment] || (index === segments.length - 1 && currentPage) || segment;
      const url = "/" + segments.slice(0, index + 1).join("/");
      const isLast = index === segments.length - 1;

      return (
        <li>
          {isLast ? (
            <span aria-current="page">{displayName}</span>
          ) : (
            <a href={url} aria-label={`Go to ${displayName}`} title={`Go to ${displayName}`}>
              {displayName}
            </a>
          )}
        </li>
      );
    })}
  </ol>
</nav>

<style>
  .nav {
    padding-top: 3.5rem;
    padding: 3.5rem .5rem .5rem .5rem;
  }
  .hidden {
    display: none;
  }
  .breadcrumbs {
    list-style: none;
    display: flex;
    gap: 8px;
    padding: 0;
    margin: 0;
  }
  .breadcrumbs li::after {
    content: "/";
    margin: 0 8px;
  }
  .breadcrumbs li:last-child::after {
    content: "";
  }
  a {
    text-decoration: none;
    color: blue;
  }
  a:hover {
    text-decoration: underline;
  }
</style>
