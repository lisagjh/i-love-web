<script>
  import p5 from "p5";

  const mySketch = (p) => {
    const elementsX = 9;
    const elementsY = 31;
    const charset = "∙··•˚̊*⁰";

    let containerHeight;
    const rotationSpeed = 0.5; // Adjust this value to change speed (lower = slower, higher = faster)

    p.setup = () => {
      const container = document.querySelector("div");
      containerHeight = container ? container.offsetHeight : window.innerHeight;
      p.createCanvas(window.innerWidth, containerHeight);
    };

    const updateCanvasSize = () => {
      const header = document.querySelector("header");
      containerHeight = header ? header.offsetHeight : window.innerHeight;
      p.resizeCanvas(window.innerWidth, containerHeight);
    };

    p.windowResized = () => {
      updateCanvasSize();
    };

    const setupResizeObserver = () => {
      const header = document.querySelector("header");
      if (header) {
        const resizeObserver = new ResizeObserver(() => {
          updateCanvasSize();
        });
        resizeObserver.observe(header);
      }
    };

    p.draw = () => {
      p.background(255);
      p.fill(100);
      p.noStroke();

      p.textAlign(p.CENTER, p.CENTER);
      p.textSize((containerHeight / elementsY) * 2.5);

      for (let y = 0; y < elementsY + 1; y++) {
        for (let x = 0; x < charset.length + 1; x++) {
          let posY = p.map(y, 0, elementsY, 0, containerHeight);

          let magX = p.map(
            p.sin(p.radians(posY * 25 + p.frameCount * rotationSpeed)), // Added rotationSpeed here
            -1,
            1,
            -p.width * 0.6,
            200
          );
          let posX = p.map(x, 0, elementsX, -magX, magX);

          let selector = x;

          p.push();
          p.translate(p.width / 2 + posX, posY);
          p.text(charset[selector], 0, 0);
          p.pop();
        }
      }
    };

    setTimeout(() => {
      setupResizeObserver();
    }, 0);
  };

  // Function to initialize or reinitialize the sketch
  function initializeSketch() {
    const container = document.getElementById("sketch-container");
    if (container) {
      // Clear any existing canvas
      const existingCanvas = container.querySelector("canvas");
      if (existingCanvas) {
        existingCanvas.remove();
      }
      new p5(mySketch, container);
    }
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", initializeSketch);

  // Initialize on view transitions
  document.addEventListener("astro:page-load", initializeSketch);

  // Clean up on page unload
  document.addEventListener("astro:before-preparation", () => {
    const container = document.getElementById("sketch-container");
    if (container) {
      const canvas = container.querySelector("canvas");
      if (canvas) {
        canvas.remove();
      }
    }
  });
</script>

<div id="sketch-container"></div>

<style>
  div {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: clamp(var(--_min-height), 100%, var(--_max-height));
    z-index: -5;
  }
</style>
